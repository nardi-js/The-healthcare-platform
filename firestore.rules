rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    // Posts collection
    match /posts/{postId} {
      allow read: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && (
        // Allow updating view count
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['views', 'commentCount', 'upvotes', 'downvotes'])
      );
      allow delete: if isOwner(resource.data.author.id);
      
      // Comments subcollection
      match /comments/{commentId} {
        allow read: if true;
        allow create: if isSignedIn();
        allow update, delete: if isOwner(resource.data.author.id);
      }
    }

    // Questions collection
    match /questions/{questionId} {
      allow read: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && (
        // Allow updating view count and votes
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['views', 'uniqueViewers', 'upvotes', 'downvotes'])
      );
      allow delete: if isOwner(resource.data.author.id);
      
      // Comments subcollection
      match /comments/{commentId} {
        allow read: if true;
        allow create: if isSignedIn();
        allow update, delete: if isOwner(resource.data.author.id);
      }
    }

    // Votes collection
    match /votes/{voteId} {
      allow read: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isOwner(resource.data.userId);
      allow delete: if isOwner(resource.data.userId);
    }

    // Reports collection
    match /reports/{reportId} {
      allow create: if isSignedIn();
      allow read, update, delete: if false; // Only admins can access via Functions
    }
  }
}
